{
	"info": {
		"_postman_id": "getir-api-collection-v2-2025",
		"name": "Getir Clone API v2 (Sprint 1)",
		"description": ".NET 9 Getir Clone API - Sprint 1: Role-Based Authorization",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "getir-api"
	},
	"item": [
		{
			"name": "🔐 Authentication (Sprint 1 Updated)",
			"item": [
				{
					"name": "1. Register Customer (Default)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    pm.environment.set('refreshToken', response.refreshToken);",
									"    pm.environment.set('userId', response.userId);",
									"    pm.environment.set('userEmail', response.email);",
									"    pm.environment.set('userRole', response.role);",
									"    pm.test('Registration successful', () => {",
									"        pm.expect(response.accessToken).to.be.a('string');",
									"        pm.expect(response.role).to.equal(1); // Customer",
									"        pm.expect(response.userId).to.be.a('string');",
									"        pm.expect(response.email).to.be.a('string');",
									"        pm.expect(response.fullName).to.be.a('string');",
									"    });",
									"    console.log('✅ Customer registered - Role:', response.role, '- UserId:', response.userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"customer@test.com\",\n  \"password\": \"Test123!\",\n  \"firstName\": \"Ali\",\n  \"lastName\": \"Demir\",\n  \"phoneNumber\": \"+905551234567\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register as Customer (role=1, default)"
					},
					"response": []
				},
				{
					"name": "2. Register MerchantOwner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('merchantOwnerToken', response.accessToken);",
									"    pm.environment.set('merchantOwnerId', response.userId);",
									"    pm.test('MerchantOwner registration successful', () => {",
									"        pm.expect(response.role).to.equal(2); // MerchantOwner",
									"    });",
									"    console.log('✅ MerchantOwner registered - UserId:', response.userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@migros.com\",\n  \"password\": \"Test123!\",\n  \"firstName\": \"Mehmet\",\n  \"lastName\": \"Çelik\",\n  \"phoneNumber\": \"+905551234568\",\n  \"role\": 2\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register as MerchantOwner (role=2)"
					},
					"response": []
				},
				{
					"name": "3. Register Courier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('courierToken', response.accessToken);",
									"    pm.environment.set('courierId', response.userId);",
									"    pm.test('Courier registration successful', () => {",
									"        pm.expect(response.role).to.equal(3); // Courier",
									"    });",
									"    console.log('✅ Courier registered - UserId:', response.userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"courier@getir.com\",\n  \"password\": \"Test123!\",\n  \"firstName\": \"Ayşe\",\n  \"lastName\": \"Yılmaz\",\n  \"phoneNumber\": \"+905551234569\",\n  \"role\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register as Courier (role=3)"
					},
					"response": []
				},
				{
					"name": "4. Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('adminToken', response.accessToken);",
									"    pm.environment.set('adminId', response.userId);",
									"    pm.test('Admin registration successful', () => {",
									"        pm.expect(response.role).to.equal(4); // Admin",
									"    });",
									"    console.log('✅ Admin registered - UserId:', response.userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@getir.com\",\n  \"password\": \"Test123!\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"phoneNumber\": \"+905551234570\",\n  \"role\": 4\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register as Admin (role=4)"
					},
					"response": []
				},
				{
					"name": "5. Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    pm.environment.set('refreshToken', response.refreshToken);",
									"    pm.environment.set('userId', response.userId);",
									"    pm.environment.set('userEmail', response.email);",
									"    pm.environment.set('userRole', response.role);",
									"    pm.environment.set('fullName', response.fullName);",
									"    pm.test('Login successful', () => {",
									"        pm.expect(response.accessToken).to.be.a('string');",
									"        pm.expect(response.refreshToken).to.be.a('string');",
									"        pm.expect(response.role).to.be.a('number');",
									"        pm.expect(response.userId).to.be.a('string');",
									"    });",
									"    const roles = {1: 'Customer', 2: 'MerchantOwner', 3: 'Courier', 4: 'Admin'};",
									"    console.log('✅ Logged in as:', roles[response.role], '- UserId:', response.userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@migros.com\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with email and password. Response now includes role, userId, email, fullName"
					},
					"response": []
				},
				{
					"name": "6. Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    pm.environment.set('refreshToken', response.refreshToken);",
									"    pm.environment.set('userId', response.userId);",
									"    pm.environment.set('userRole', response.role);",
									"    pm.test('Token refresh successful', () => {",
									"        pm.expect(response.accessToken).to.be.a('string');",
									"        pm.expect(response.role).to.be.a('number');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh access token using refresh token"
					},
					"response": []
				},
				{
					"name": "7. Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "Logout and revoke all refresh tokens"
					},
					"response": []
				}
			],
			"description": "✨ Sprint 1 Updated: Role-based authentication with Customer, MerchantOwner, Courier, Admin roles"
		},
		{
			"name": "🏪 Merchants (Sprint 1 Updated)",
			"item": [
				{
					"name": "List Merchants",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants?page=1&pageSize=20&sortDir=desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated list of active merchants (Public)"
					},
					"response": []
				},
				{
					"name": "Get Merchant By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "Get merchant details by ID (Public). Response includes ownerId and ownerName ✨"
					},
					"response": []
				},
				{
					"name": "Create Merchant (MerchantOwner or Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('merchantId', response.id);",
									"    pm.test('Merchant created successfully', () => {",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.ownerId).to.be.a('string');",
									"        pm.expect(response.ownerName).to.be.a('string');",
									"        pm.expect(response.name).to.equal('Migros Kadıköy');",
									"    });",
									"    console.log('✅ Merchant created - OwnerId:', response.ownerId, '- OwnerName:', response.ownerName);",
									"} else if (pm.response.code === 403) {",
									"    console.log('❌ Forbidden: Only MerchantOwner or Admin can create merchants');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{merchantOwnerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Migros Kadıköy\",\n  \"description\": \"Taze ürünler ve market alışverişi\",\n  \"categoryId\": \"{{categoryId}}\",\n  \"address\": \"Kadıköy, İstanbul\",\n  \"latitude\": 40.9897,\n  \"longitude\": 29.0257,\n  \"phoneNumber\": \"+902161234567\",\n  \"email\": \"kadikoy@migros.com.tr\",\n  \"minimumOrderAmount\": 50,\n  \"deliveryFee\": 15\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants"
							]
						},
						"description": "✨ Sprint 1: Only MerchantOwner or Admin can create merchants. Merchant is automatically assigned to current user as owner."
					},
					"response": []
				},
				{
					"name": "Update Merchant (Owner or Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Merchant updated successfully', () => {",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.ownerId).to.be.a('string');",
									"    });",
									"    console.log('✅ Merchant updated');",
									"} else if (pm.response.code === 403) {",
									"    console.log('❌ Forbidden: Only merchant owner or Admin can update');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{merchantOwnerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Migros Kadıköy - Updated\",\n  \"description\": \"Güncellenmiş açıklama\",\n  \"address\": \"Kadıköy Merkez, İstanbul\",\n  \"phoneNumber\": \"+902161234567\",\n  \"email\": \"kadikoy@migros.com.tr\",\n  \"minimumOrderAmount\": 60,\n  \"deliveryFee\": 20\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "✨ Sprint 1: Only merchant owner or Admin can update. Returns 403 Forbidden if not authorized."
					},
					"response": []
				},
				{
					"name": "Delete Merchant (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('✅ Merchant deleted (Admin only)');",
									"} else if (pm.response.code === 403) {",
									"    console.log('❌ Forbidden: Only Admin can delete merchants');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "✨ Sprint 1: Only Admin can delete merchants. Returns 403 Forbidden otherwise."
					},
					"response": []
				}
			],
			"description": "✨ Sprint 1 Updated: Role-based authorization for merchant operations"
		},
		{
			"name": "📋 Role Test Scenarios",
			"item": [
				{
					"name": "Test: Customer tries to create Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 403 Forbidden', () => {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"console.log('✅ Test passed: Customer cannot create merchant');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Market\",\n  \"categoryId\": \"{{categoryId}}\",\n  \"address\": \"Test\",\n  \"latitude\": 40.0,\n  \"longitude\": 29.0,\n  \"phoneNumber\": \"+90555000000\",\n  \"minimumOrderAmount\": 50,\n  \"deliveryFee\": 15\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants"
							]
						},
						"description": "Test: Customer role should NOT be able to create merchant (403 Forbidden)"
					},
					"response": []
				},
				{
					"name": "Test: MerchantOwner updates own merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 200 OK', () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"console.log('✅ Test passed: MerchantOwner can update own merchant');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{merchantOwnerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My Merchant\",\n  \"description\": \"Updated by owner\",\n  \"address\": \"Test\",\n  \"phoneNumber\": \"+90555000000\",\n  \"minimumOrderAmount\": 50,\n  \"deliveryFee\": 15\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "Test: MerchantOwner CAN update own merchant (200 OK)"
					},
					"response": []
				},
				{
					"name": "Test: Customer tries to delete Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 403 Forbidden', () => {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"console.log('✅ Test passed: Customer cannot delete merchant');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "Test: Only Admin can delete merchants (403 Forbidden for Customer)"
					},
					"response": []
				}
			],
			"description": "Test scenarios for role-based authorization"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:7001",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string",
			"description": "Current user access token (Customer by default)"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string",
			"description": "Current user ID"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "userRole",
			"value": "",
			"type": "string",
			"description": "1=Customer, 2=MerchantOwner, 3=Courier, 4=Admin"
		},
		{
			"key": "fullName",
			"value": "",
			"type": "string"
		},
		{
			"key": "merchantOwnerToken",
			"value": "",
			"type": "string",
			"description": "MerchantOwner access token"
		},
		{
			"key": "merchantOwnerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "courierToken",
			"value": "",
			"type": "string",
			"description": "Courier access token"
		},
		{
			"key": "courierId",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string",
			"description": "Admin access token"
		},
		{
			"key": "adminId",
			"value": "",
			"type": "string"
		},
		{
			"key": "merchantId",
			"value": "",
			"type": "string"
		},
		{
			"key": "productId",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "",
			"type": "string"
		}
	]
}

