// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/blocs/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:getir_mobile/domain/entities/user_entity.dart' as _i2;
import 'package:getir_mobile/domain/usecases/auth_usecases.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserEntity_0 extends _i1.SmartFake implements _i2.UserEntity {
  _FakeUserEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i3.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserEntity> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.UserEntity>);
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i3.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserEntity> call(
    String? email,
    String? password,
    String? firstName,
    String? lastName, {
    String? phoneNumber,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
            firstName,
            lastName,
          ],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i4.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
              firstName,
              lastName,
            ],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i4.Future<_i2.UserEntity>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i3.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RefreshTokenUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshTokenUseCase extends _i1.Mock
    implements _i3.RefreshTokenUseCase {
  MockRefreshTokenUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserEntity> call(String? refreshToken) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [refreshToken],
        ),
        returnValue: _i4.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #call,
            [refreshToken],
          ),
        )),
      ) as _i4.Future<_i2.UserEntity>);
}

/// A class which mocks [GetCurrentUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentUserUseCase extends _i1.Mock
    implements _i3.GetCurrentUserUseCase {
  MockGetCurrentUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserEntity?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.UserEntity?>.value(),
      ) as _i4.Future<_i2.UserEntity?>);
}

/// A class which mocks [ForgotPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgotPasswordUseCase extends _i1.Mock
    implements _i3.ForgotPasswordUseCase {
  MockForgotPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(String? email) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ResetPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetPasswordUseCase extends _i1.Mock
    implements _i3.ResetPasswordUseCase {
  MockResetPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(
    String? token,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            token,
            newPassword,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CheckAuthenticationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckAuthenticationUseCase extends _i1.Mock
    implements _i3.CheckAuthenticationUseCase {
  MockCheckAuthenticationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [CheckTokenValidityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckTokenValidityUseCase extends _i1.Mock
    implements _i3.CheckTokenValidityUseCase {
  MockCheckTokenValidityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
