// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/blocs/working_hours_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:getir_mobile/core/errors/result.dart' as _i2;
import 'package:getir_mobile/domain/entities/working_hours.dart' as _i5;
import 'package:getir_mobile/domain/services/working_hours_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WorkingHoursService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkingHoursService extends _i1.Mock
    implements _i3.WorkingHoursService {
  MockWorkingHoursService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.WorkingHours>>> getWorkingHours(
          String? merchantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkingHours,
          [merchantId],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.WorkingHours>>>.value(
            _FakeResult_0<List<_i5.WorkingHours>>(
          this,
          Invocation.method(
            #getWorkingHours,
            [merchantId],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.WorkingHours>>>);

  @override
  _i4.Future<_i2.Result<bool>> checkIfMerchantOpen(
    String? merchantId, {
    DateTime? checkTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfMerchantOpen,
          [merchantId],
          {#checkTime: checkTime},
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #checkIfMerchantOpen,
            [merchantId],
            {#checkTime: checkTime},
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<_i5.WorkingHours>> getWorkingHoursById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkingHoursById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.WorkingHours>>.value(
            _FakeResult_0<_i5.WorkingHours>(
          this,
          Invocation.method(
            #getWorkingHoursById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.WorkingHours>>);

  @override
  _i4.Future<_i2.Result<DateTime?>> getNextOpenTime(String? merchantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextOpenTime,
          [merchantId],
        ),
        returnValue:
            _i4.Future<_i2.Result<DateTime?>>.value(_FakeResult_0<DateTime?>(
          this,
          Invocation.method(
            #getNextOpenTime,
            [merchantId],
          ),
        )),
      ) as _i4.Future<_i2.Result<DateTime?>>);
}
