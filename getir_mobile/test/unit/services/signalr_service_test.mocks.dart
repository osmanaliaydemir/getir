// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/services/signalr_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:getir_mobile/core/services/encryption_service.dart' as _i2;
import 'package:getir_mobile/core/services/logger_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EncryptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEncryptionService extends _i1.Mock implements _i2.EncryptionService {
  MockEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveAccessToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveAccessToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> saveRefreshToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveRefreshToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> saveUserCredentials({
    required String? userId,
    required String? email,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserCredentials,
          [],
          {
            #userId: userId,
            #email: email,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<String?> getUserEmail() => (super.noSuchMethod(
        Invocation.method(
          #getUserEmail,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> saveEncryptedData(
    String? key,
    String? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveEncryptedData,
          [
            key,
            data,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getEncryptedData(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getEncryptedData,
          [key],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> hasAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #hasAccessToken,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i4.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setMinimumLevel(_i4.LogLevel? level) => super.noSuchMethod(
        Invocation.method(
          #setMinimumLevel,
          [level],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(
    String? message, {
    String? tag,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {
            #tag: tag,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, {
    String? tag,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {
            #tag: tag,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, {
    String? tag,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {
            #tag: tag,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    String? tag,
    dynamic error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #tag: tag,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(
    String? message, {
    String? tag,
    required dynamic error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #fatal,
          [message],
          {
            #tag: tag,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logNetworkRequest({
    required String? method,
    required String? url,
    int? statusCode,
    Duration? duration,
    Map<String, dynamic>? headers,
    dynamic error,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logNetworkRequest,
          [],
          {
            #method: method,
            #url: url,
            #statusCode: statusCode,
            #duration: duration,
            #headers: headers,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logBlocEvent({
    required String? blocName,
    required String? eventName,
    Map<String, dynamic>? eventData,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logBlocEvent,
          [],
          {
            #blocName: blocName,
            #eventName: eventName,
            #eventData: eventData,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logBlocStateChange({
    required String? blocName,
    required String? previousState,
    required String? newState,
    Map<String, dynamic>? stateData,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logBlocStateChange,
          [],
          {
            #blocName: blocName,
            #previousState: previousState,
            #newState: newState,
            #stateData: stateData,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logNavigation({
    required String? from,
    required String? to,
    Map<String, dynamic>? params,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logNavigation,
          [],
          {
            #from: from,
            #to: to,
            #params: params,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logUserAction({
    required String? action,
    String? screen,
    Map<String, dynamic>? details,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logUserAction,
          [],
          {
            #action: action,
            #screen: screen,
            #details: details,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logAuthEvent({
    required String? event,
    String? userId,
    Map<String, dynamic>? details,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logAuthEvent,
          [],
          {
            #event: event,
            #userId: userId,
            #details: details,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logDatabaseOperation({
    required String? operation,
    required String? table,
    bool? success = true,
    dynamic error,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logDatabaseOperation,
          [],
          {
            #operation: operation,
            #table: table,
            #success: success,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logCacheOperation({
    required String? operation,
    required String? key,
    bool? hit = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logCacheOperation,
          [],
          {
            #operation: operation,
            #key: key,
            #hit: hit,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logPerformance({
    required String? operation,
    required Duration? duration,
    Map<String, dynamic>? metrics,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logPerformance,
          [],
          {
            #operation: operation,
            #duration: duration,
            #metrics: metrics,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logLifecycleEvent({
    required String? event,
    Map<String, dynamic>? details,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logLifecycleEvent,
          [],
          {
            #event: event,
            #details: details,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logSensitiveOperation({
    required String? operation,
    bool? success = true,
    dynamic error,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logSensitiveOperation,
          [],
          {
            #operation: operation,
            #success: success,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> sanitizeData(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #sanitizeData,
          [data],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
