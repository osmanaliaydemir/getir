// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/services/reconnection_strategy_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:firebase_analytics/firebase_analytics.dart' as _i3;
import 'package:firebase_performance/firebase_performance.dart' as _i4;
import 'package:getir_mobile/core/services/analytics_service.dart' as _i9;
import 'package:getir_mobile/core/services/logger_service.dart' as _i10;
import 'package:getir_mobile/core/services/network_service.dart' as _i6;
import 'package:getir_mobile/core/services/sync_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAnalyticsObserver_1 extends _i1.SmartFake
    implements _i3.FirebaseAnalyticsObserver {
  _FakeFirebaseAnalyticsObserver_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrace_2 extends _i1.SmartFake implements _i4.Trace {
  _FakeTrace_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i6.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<bool> get networkStatusStream => (super.noSuchMethod(
        Invocation.getter(#networkStatusStream),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isHostReachable(String? host) => (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [host],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<String> getConnectionType() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionType,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getConnectionType,
            [],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i8.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSyncing => (super.noSuchMethod(
        Invocation.getter(#isSyncing),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> syncPendingActions() => (super.noSuchMethod(
        Invocation.method(
          #syncPendingActions,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> forceSyncNow() => (super.noSuchMethod(
        Invocation.method(
          #forceSyncNow,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  Map<String, dynamic> getSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #getSyncStatus,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i5.Future<void> clearSyncData() => (super.noSuchMethod(
        Invocation.method(
          #clearSyncData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i9.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseAnalyticsObserver get observer => (super.noSuchMethod(
        Invocation.getter(#observer),
        returnValue: _FakeFirebaseAnalyticsObserver_1(
          this,
          Invocation.getter(#observer),
        ),
      ) as _i3.FirebaseAnalyticsObserver);

  @override
  _i5.Future<void> logScreenView({
    required String? screenName,
    String? screenClass,
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [],
          {
            #screenName: screenName,
            #screenClass: screenClass,
            #parameters: parameters,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logButtonClick({
    required String? buttonName,
    String? screenName,
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logButtonClick,
          [],
          {
            #buttonName: buttonName,
            #screenName: screenName,
            #parameters: parameters,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logSearch({
    required String? searchTerm,
    String? searchType,
    int? resultCount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSearch,
          [],
          {
            #searchTerm: searchTerm,
            #searchType: searchType,
            #resultCount: resultCount,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logProductView({
    required String? productId,
    required String? productName,
    String? category,
    double? price,
    String? currency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logProductView,
          [],
          {
            #productId: productId,
            #productName: productName,
            #category: category,
            #price: price,
            #currency: currency,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logAddToCart({
    required String? productId,
    required String? productName,
    required double? price,
    String? category,
    int? quantity = 1,
    String? currency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddToCart,
          [],
          {
            #productId: productId,
            #productName: productName,
            #price: price,
            #category: category,
            #quantity: quantity,
            #currency: currency,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logRemoveFromCart({
    required String? productId,
    required String? productName,
    required double? price,
    int? quantity = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logRemoveFromCart,
          [],
          {
            #productId: productId,
            #productName: productName,
            #price: price,
            #quantity: quantity,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logAddToFavorites({
    required String? itemId,
    required String? itemName,
    String? itemType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddToFavorites,
          [],
          {
            #itemId: itemId,
            #itemName: itemName,
            #itemType: itemType,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logBeginCheckout({
    required double? value,
    required String? currency,
    List<_i3.AnalyticsEventItem>? items,
    String? coupon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logBeginCheckout,
          [],
          {
            #value: value,
            #currency: currency,
            #items: items,
            #coupon: coupon,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logAddPaymentInfo({
    required String? paymentType,
    required double? value,
    String? currency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddPaymentInfo,
          [],
          {
            #paymentType: paymentType,
            #value: value,
            #currency: currency,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logPurchase({
    required String? orderId,
    required double? total,
    required String? currency,
    List<_i3.AnalyticsEventItem>? items,
    double? tax,
    double? shipping,
    String? coupon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logPurchase,
          [],
          {
            #orderId: orderId,
            #total: total,
            #currency: currency,
            #items: items,
            #tax: tax,
            #shipping: shipping,
            #coupon: coupon,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logOrderCancelled({
    required String? orderId,
    required double? value,
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logOrderCancelled,
          [],
          {
            #orderId: orderId,
            #value: value,
            #reason: reason,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logLogin({String? method}) => (super.noSuchMethod(
        Invocation.method(
          #logLogin,
          [],
          {#method: method},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logSignUp({String? method}) => (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {#method: method},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logLogout() => (super.noSuchMethod(
        Invocation.method(
          #logLogout,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logError({
    required dynamic error,
    StackTrace? stackTrace,
    String? reason,
    Map<String, dynamic>? context,
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [],
          {
            #error: error,
            #stackTrace: stackTrace,
            #reason: reason,
            #context: context,
            #fatal: fatal,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setErrorContext({
    String? userId,
    String? screenName,
    Map<String, dynamic>? customKeys,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setErrorContext,
          [],
          {
            #userId: userId,
            #screenName: screenName,
            #customKeys: customKeys,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i4.Trace> startTrace(String? traceName) => (super.noSuchMethod(
        Invocation.method(
          #startTrace,
          [traceName],
        ),
        returnValue: _i5.Future<_i4.Trace>.value(_FakeTrace_2(
          this,
          Invocation.method(
            #startTrace,
            [traceName],
          ),
        )),
      ) as _i5.Future<_i4.Trace>);

  @override
  _i5.Future<void> stopTrace(_i4.Trace? trace) => (super.noSuchMethod(
        Invocation.method(
          #stopTrace,
          [trace],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<T> measurePerformance<T>({
    required String? traceName,
    required _i5.Future<T> Function()? operation,
    Map<String, String>? attributes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #measurePerformance,
          [],
          {
            #traceName: traceName,
            #operation: operation,
            #attributes: attributes,
          },
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #measurePerformance,
                  [],
                  {
                    #traceName: traceName,
                    #operation: operation,
                    #attributes: attributes,
                  },
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #measurePerformance,
                [],
                {
                  #traceName: traceName,
                  #operation: operation,
                  #attributes: attributes,
                },
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i5.Future<void> setUserId(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setUserProperty({
    required String? name,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperty,
          [],
          {
            #name: name,
            #value: value,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setUserDemographics({
    int? age,
    String? gender,
    String? interests,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserDemographics,
          [],
          {
            #age: age,
            #gender: gender,
            #interests: interests,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logCustomEvent({
    required String? eventName,
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logCustomEvent,
          [],
          {
            #eventName: eventName,
            #parameters: parameters,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setAnalyticsEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setAnalyticsEnabled,
          [enabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setCrashlyticsEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setCrashlyticsEnabled,
          [enabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> resetAnalyticsData() => (super.noSuchMethod(
        Invocation.method(
          #resetAnalyticsData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i10.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setMinimumLevel(_i10.LogLevel? level) => super.noSuchMethod(
        Invocation.method(
          #setMinimumLevel,
          [level],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(
    String? message, {
    String? tag,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {
            #tag: tag,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, {
    String? tag,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {
            #tag: tag,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, {
    String? tag,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {
            #tag: tag,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    String? tag,
    dynamic error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #tag: tag,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(
    String? message, {
    String? tag,
    required dynamic error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #fatal,
          [message],
          {
            #tag: tag,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logNetworkRequest({
    required String? method,
    required String? url,
    int? statusCode,
    Duration? duration,
    Map<String, dynamic>? headers,
    dynamic error,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logNetworkRequest,
          [],
          {
            #method: method,
            #url: url,
            #statusCode: statusCode,
            #duration: duration,
            #headers: headers,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logBlocEvent({
    required String? blocName,
    required String? eventName,
    Map<String, dynamic>? eventData,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logBlocEvent,
          [],
          {
            #blocName: blocName,
            #eventName: eventName,
            #eventData: eventData,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logBlocStateChange({
    required String? blocName,
    required String? previousState,
    required String? newState,
    Map<String, dynamic>? stateData,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logBlocStateChange,
          [],
          {
            #blocName: blocName,
            #previousState: previousState,
            #newState: newState,
            #stateData: stateData,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logNavigation({
    required String? from,
    required String? to,
    Map<String, dynamic>? params,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logNavigation,
          [],
          {
            #from: from,
            #to: to,
            #params: params,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logUserAction({
    required String? action,
    String? screen,
    Map<String, dynamic>? details,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logUserAction,
          [],
          {
            #action: action,
            #screen: screen,
            #details: details,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logAuthEvent({
    required String? event,
    String? userId,
    Map<String, dynamic>? details,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logAuthEvent,
          [],
          {
            #event: event,
            #userId: userId,
            #details: details,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logDatabaseOperation({
    required String? operation,
    required String? table,
    bool? success = true,
    dynamic error,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logDatabaseOperation,
          [],
          {
            #operation: operation,
            #table: table,
            #success: success,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logCacheOperation({
    required String? operation,
    required String? key,
    bool? hit = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logCacheOperation,
          [],
          {
            #operation: operation,
            #key: key,
            #hit: hit,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logPerformance({
    required String? operation,
    required Duration? duration,
    Map<String, dynamic>? metrics,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logPerformance,
          [],
          {
            #operation: operation,
            #duration: duration,
            #metrics: metrics,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logLifecycleEvent({
    required String? event,
    Map<String, dynamic>? details,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logLifecycleEvent,
          [],
          {
            #event: event,
            #details: details,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logSensitiveOperation({
    required String? operation,
    bool? success = true,
    dynamic error,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logSensitiveOperation,
          [],
          {
            #operation: operation,
            #success: success,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> sanitizeData(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #sanitizeData,
          [data],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
