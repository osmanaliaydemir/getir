// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/repositories/address_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:getir_mobile/data/datasources/address_datasource.dart' as _i3;
import 'package:getir_mobile/domain/entities/address.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserAddress_0 extends _i1.SmartFake implements _i2.UserAddress {
  _FakeUserAddress_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAddressDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAddressDataSource extends _i1.Mock
    implements _i3.IAddressDataSource {
  MockIAddressDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.UserAddress>> getUserAddresses() => (super.noSuchMethod(
        Invocation.method(
          #getUserAddresses,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.UserAddress>>.value(<_i2.UserAddress>[]),
      ) as _i4.Future<List<_i2.UserAddress>>);

  @override
  _i4.Future<_i2.UserAddress> getAddressById(String? addressId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressById,
          [addressId],
        ),
        returnValue: _i4.Future<_i2.UserAddress>.value(_FakeUserAddress_0(
          this,
          Invocation.method(
            #getAddressById,
            [addressId],
          ),
        )),
      ) as _i4.Future<_i2.UserAddress>);

  @override
  _i4.Future<_i2.UserAddress> createAddress(
          _i3.CreateAddressRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAddress,
          [request],
        ),
        returnValue: _i4.Future<_i2.UserAddress>.value(_FakeUserAddress_0(
          this,
          Invocation.method(
            #createAddress,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.UserAddress>);

  @override
  _i4.Future<_i2.UserAddress> updateAddress(
    String? addressId,
    _i3.UpdateAddressRequest? request,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAddress,
          [
            addressId,
            request,
          ],
        ),
        returnValue: _i4.Future<_i2.UserAddress>.value(_FakeUserAddress_0(
          this,
          Invocation.method(
            #updateAddress,
            [
              addressId,
              request,
            ],
          ),
        )),
      ) as _i4.Future<_i2.UserAddress>);

  @override
  _i4.Future<void> deleteAddress(String? addressId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAddress,
          [addressId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.UserAddress> setDefaultAddress(String? addressId) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaultAddress,
          [addressId],
        ),
        returnValue: _i4.Future<_i2.UserAddress>.value(_FakeUserAddress_0(
          this,
          Invocation.method(
            #setDefaultAddress,
            [addressId],
          ),
        )),
      ) as _i4.Future<_i2.UserAddress>);
}
