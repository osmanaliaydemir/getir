// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/repositories/merchant_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:getir_mobile/data/datasources/merchant_datasource.dart' as _i3;
import 'package:getir_mobile/domain/entities/merchant.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMerchant_0 extends _i1.SmartFake implements _i2.Merchant {
  _FakeMerchant_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MerchantDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMerchantDataSource extends _i1.Mock
    implements _i3.MerchantDataSource {
  MockMerchantDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Merchant>> getMerchants({
    int? page = 1,
    int? limit = 20,
    String? search,
    String? category,
    double? latitude,
    double? longitude,
    double? radius,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMerchants,
          [],
          {
            #page: page,
            #limit: limit,
            #search: search,
            #category: category,
            #latitude: latitude,
            #longitude: longitude,
            #radius: radius,
          },
        ),
        returnValue: _i4.Future<List<_i2.Merchant>>.value(<_i2.Merchant>[]),
      ) as _i4.Future<List<_i2.Merchant>>);

  @override
  _i4.Future<_i2.Merchant> getMerchantById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMerchantById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Merchant>.value(_FakeMerchant_0(
          this,
          Invocation.method(
            #getMerchantById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Merchant>);

  @override
  _i4.Future<List<_i2.Merchant>> searchMerchants(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMerchants,
          [query],
        ),
        returnValue: _i4.Future<List<_i2.Merchant>>.value(<_i2.Merchant>[]),
      ) as _i4.Future<List<_i2.Merchant>>);

  @override
  _i4.Future<List<_i2.Merchant>> getNearbyMerchants({
    required double? latitude,
    required double? longitude,
    double? radius = 5.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNearbyMerchants,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
            #radius: radius,
          },
        ),
        returnValue: _i4.Future<List<_i2.Merchant>>.value(<_i2.Merchant>[]),
      ) as _i4.Future<List<_i2.Merchant>>);

  @override
  _i4.Future<List<_i2.Merchant>> getNearbyMerchantsByCategory({
    required double? latitude,
    required double? longitude,
    required int? categoryType,
    double? radius = 5.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNearbyMerchantsByCategory,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
            #categoryType: categoryType,
            #radius: radius,
          },
        ),
        returnValue: _i4.Future<List<_i2.Merchant>>.value(<_i2.Merchant>[]),
      ) as _i4.Future<List<_i2.Merchant>>);
}
