// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/repositories/order_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:getir_mobile/data/datasources/order_datasource.dart' as _i3;
import 'package:getir_mobile/domain/entities/order.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrder_0 extends _i1.SmartFake implements _i2.Order {
  _FakeOrder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaymentResult_1 extends _i1.SmartFake implements _i3.PaymentResult {
  _FakePaymentResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IOrderDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOrderDataSource extends _i1.Mock implements _i3.IOrderDataSource {
  MockIOrderDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Order> createOrder(_i3.CreateOrderRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [request],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #createOrder,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<List<_i2.Order>> getUserOrders() => (super.noSuchMethod(
        Invocation.method(
          #getUserOrders,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i4.Future<List<_i2.Order>>);

  @override
  _i4.Future<_i2.Order> getOrderById(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> cancelOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i3.PaymentResult> processPayment(
          _i3.CreatePaymentRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #processPayment,
          [request],
        ),
        returnValue: _i4.Future<_i3.PaymentResult>.value(_FakePaymentResult_1(
          this,
          Invocation.method(
            #processPayment,
            [request],
          ),
        )),
      ) as _i4.Future<_i3.PaymentResult>);

  @override
  _i4.Future<_i3.PaymentResult> getPaymentStatus(String? paymentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaymentStatus,
          [paymentId],
        ),
        returnValue: _i4.Future<_i3.PaymentResult>.value(_FakePaymentResult_1(
          this,
          Invocation.method(
            #getPaymentStatus,
            [paymentId],
          ),
        )),
      ) as _i4.Future<_i3.PaymentResult>);
}
