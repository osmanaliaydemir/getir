// Mocks generated by Mockito 5.4.4 from annotations
// in getir_mobile/test/unit/repositories/working_hours_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:getir_mobile/data/datasources/working_hours_datasource.dart'
    as _i3;
import 'package:getir_mobile/domain/entities/working_hours.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkingHours_0 extends _i1.SmartFake implements _i2.WorkingHours {
  _FakeWorkingHours_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WorkingHoursDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkingHoursDataSource extends _i1.Mock
    implements _i3.WorkingHoursDataSource {
  MockWorkingHoursDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.WorkingHours>> getWorkingHoursByMerchant(
          String? merchantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkingHoursByMerchant,
          [merchantId],
        ),
        returnValue:
            _i4.Future<List<_i2.WorkingHours>>.value(<_i2.WorkingHours>[]),
      ) as _i4.Future<List<_i2.WorkingHours>>);

  @override
  _i4.Future<bool> isMerchantOpen(
    String? merchantId, {
    DateTime? checkTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMerchantOpen,
          [merchantId],
          {#checkTime: checkTime},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.WorkingHours> getWorkingHoursById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkingHoursById,
          [id],
        ),
        returnValue: _i4.Future<_i2.WorkingHours>.value(_FakeWorkingHours_0(
          this,
          Invocation.method(
            #getWorkingHoursById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.WorkingHours>);
}
