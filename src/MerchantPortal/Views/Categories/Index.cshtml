@model List<Getir.MerchantPortal.Models.CategoryTreeNode>
@{
    ViewData["Title"] = "Kategoriler";
    var allCategories = ViewBag.AllCategories as List<Getir.MerchantPortal.Models.ProductCategoryResponse> ?? new();
}

@section Styles {
    <link rel="stylesheet" href="~/css/dashboard-modern.css" />
    <style>
        .category-tree {
            position: relative;
        }
        
        .category-node {
            cursor: move;
            transition: all 0.2s ease;
        }
        
        .category-node:hover {
            background-color: #f9fafb;
        }
        
        .category-node.dragging {
            opacity: 0.5;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .category-node.drag-over {
            border-top: 3px solid #667eea;
        }
        
        .drag-handle {
            cursor: grab;
            color: #9ca3af;
            padding: 0.5rem;
            transition: color 0.2s ease;
        }
        
        .drag-handle:hover {
            color: #667eea;
        }
        
        .drag-handle:active {
            cursor: grabbing;
        }
        
        .reorder-mode .category-actions {
            display: none !important;
        }
        
        .reorder-mode .category-node {
            border: 2px dashed #e5e7eb;
            border-radius: 8px;
            margin-bottom: 0.5rem;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h3><i class="fas fa-tags"></i> Kategoriler</h3>
        <p class="text-muted mb-0" id="reorderHint" style="display: none;">
            <i class="fas fa-arrows-alt-v me-2"></i>Kategorileri sürükleyerek sıralayın
        </p>
    </div>
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-outline-primary" id="toggleReorderBtn">
            <i class="fas fa-arrows-alt-v"></i> Sırala
        </button>
        <button type="button" class="btn btn-success" id="saveOrderBtn" style="display: none;">
            <i class="fas fa-save"></i> Sıralamayı Kaydet
        </button>
        <button type="button" class="btn btn-secondary" id="cancelOrderBtn" style="display: none;">
            <i class="fas fa-times"></i> İptal
        </button>
        <a href="@Url.Action("Create")" class="btn btn-getir">
            <i class="fas fa-plus"></i> Yeni Kategori Ekle
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="stat-card">
            <h5 class="mb-3">
                <i class="fas fa-sitemap"></i> Kategori Ağacı
            </h5>
            
            @if (Model != null && Model.Any())
            {
                <div class="category-tree">
                    @foreach (var node in Model)
                    {
                        @await Html.PartialAsync("_CategoryTreeNode", node)
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-folder-open fa-4x text-muted mb-3"></i>
                    <h5 class="text-muted">Henüz kategori eklemediniz</h5>
                    <p class="text-muted">Ürünlerinizi organize etmek için kategori oluşturun</p>
                    <a href="@Url.Action("Create")" class="btn btn-getir mt-3">
                        <i class="fas fa-plus"></i> İlk Kategoriyi Ekle
                    </a>
                </div>
            }
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="stat-card">
            <h5 class="mb-3">
                <i class="fas fa-info-circle"></i> İstatistikler
            </h5>
            
            <div class="mb-3">
                <div class="d-flex justify-content-between mb-2">
                    <span class="text-muted">Toplam Kategori</span>
                    <strong>@allCategories.Count</strong>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span class="text-muted">Ana Kategoriler</span>
                    <strong>@allCategories.Count(c => c.ParentCategoryId == null)</strong>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span class="text-muted">Alt Kategoriler</span>
                    <strong>@allCategories.Count(c => c.ParentCategoryId != null)</strong>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span class="text-muted">Aktif Kategoriler</span>
                    <strong>@allCategories.Count(c => c.IsActive)</strong>
                </div>
                <div class="d-flex justify-content-between">
                    <span class="text-muted">Toplam Ürün</span>
                    <strong>@allCategories.Sum(c => c.ProductCount)</strong>
                </div>
            </div>
            
            <hr />
            
            <h6 class="mb-3">En Çok Ürünlü Kategoriler</h6>
            @foreach (var category in allCategories.OrderByDescending(c => c.ProductCount).Take(5))
            {
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div>
                        <i class="fas fa-folder text-muted"></i>
                        <span class="ms-2">@category.Name</span>
                    </div>
                    <span class="badge bg-primary">@category.ProductCount</span>
                </div>
            }
        </div>
        
        <div class="stat-card mt-3">
            <h6 class="mb-3">
                <i class="fas fa-lightbulb"></i> İpuçları
            </h6>
            <ul class="small text-muted mb-0" style="list-style: none; padding-left: 0;">
                <li class="mb-2">
                    <i class="fas fa-check text-success"></i>
                    Kategorileri mantıklı bir hiyerarşi ile düzenleyin
                </li>
                <li class="mb-2">
                    <i class="fas fa-check text-success"></i>
                    Her ürünü uygun kategoriye atayın
                </li>
                <li class="mb-2">
                    <i class="fas fa-check text-success"></i>
                    Kategori isimlerini kısa ve açık tutun
                </li>
                <li class="mb-2">
                    <i class="fas fa-check text-success"></i>
                    Kullanılmayan kategorileri silebilirsiniz
                </li>
            </ul>
        </div>
    </div>
</div>

<style>
    .category-tree {
        padding-left: 0;
    }
    
    .category-node {
        margin-bottom: 0.5rem;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: #fafafa;
        transition: all 0.2s;
    }
    
    .category-node:hover {
        background: #f0f0f0;
        border-color: var(--getir-purple);
    }
    
    .category-node.level-0 {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-left: 4px solid var(--getir-purple);
    }
    
    .category-node.level-1 {
        margin-left: 2rem;
        background: white;
        border-left: 3px solid #6c757d;
    }
    
    .category-node.level-2 {
        margin-left: 4rem;
        background: white;
        border-left: 2px solid #adb5bd;
    }
    
    .category-children {
        margin-top: 0.5rem;
    }
    
    .category-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        margin-right: 1rem;
    }
    
    .category-icon.level-0 {
        background: var(--getir-purple);
        color: white;
    }
    
    .category-icon.level-1 {
        background: #6c757d;
        color: white;
    }
    
    .category-icon.level-2 {
        background: #adb5bd;
        color: white;
    }
    
    .category-toggle {
        cursor: pointer;
        transition: transform 0.2s;
    }
    
    .category-toggle.collapsed {
        transform: rotate(-90deg);
    }
</style>

@section Scripts {
    <script>
        let reorderMode = false;
        let draggedElement = null;
        let originalOrders = {};
        
        $(document).ready(function() {
            // Toggle category children
            $('.category-toggle').click(function() {
                const $toggle = $(this);
                const targetId = $toggle.data('target');
                const $target = $(targetId);
                
                $target.slideToggle(200);
                $toggle.toggleClass('collapsed');
            });
            
            // Initialize drag & drop
            initializeDragAndDrop();
            
            // Toggle reorder mode
            $('#toggleReorderBtn').click(function() {
                toggleReorderMode(true);
            });
            
            $('#cancelOrderBtn').click(function() {
                restoreOriginalOrder();
                toggleReorderMode(false);
            });
            
            $('#saveOrderBtn').click(function() {
                saveNewOrder();
            });
        });
        
        function initializeDragAndDrop() {
            const nodes = document.querySelectorAll('.category-node');
            
            nodes.forEach(node => {
                // Drag start
                node.addEventListener('dragstart', function(e) {
                    if (!reorderMode) {
                        e.preventDefault();
                        return;
                    }
                    
                    draggedElement = this;
                    this.classList.add('dragging');
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/html', this.innerHTML);
                });
                
                // Drag over
                node.addEventListener('dragover', function(e) {
                    if (!reorderMode || draggedElement === this) return;
                    
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'move';
                    
                    const parentId = draggedElement.dataset.parentId;
                    const thisParentId = this.dataset.parentId;
                    
                    // Only allow reorder within same level
                    if (parentId === thisParentId) {
                        this.classList.add('drag-over');
                    }
                });
                
                // Drag leave
                node.addEventListener('dragleave', function() {
                    this.classList.remove('drag-over');
                });
                
                // Drop
                node.addEventListener('drop', function(e) {
                    if (!reorderMode || draggedElement === this) return;
                    
                    e.stopPropagation();
                    e.preventDefault();
                    
                    const parentId = draggedElement.dataset.parentId;
                    const thisParentId = this.dataset.parentId;
                    
                    // Only allow reorder within same level
                    if (parentId === thisParentId) {
                        // Swap elements
                        const parent = this.parentNode;
                        const draggedIndex = Array.from(parent.children).indexOf(draggedElement);
                        const targetIndex = Array.from(parent.children).indexOf(this);
                        
                        if (draggedIndex < targetIndex) {
                            parent.insertBefore(draggedElement, this.nextSibling);
                        } else {
                            parent.insertBefore(draggedElement, this);
                        }
                        
                        updateDisplayOrders(parent);
                    }
                    
                    this.classList.remove('drag-over');
                });
                
                // Drag end
                node.addEventListener('dragend', function() {
                    this.classList.remove('dragging');
                    document.querySelectorAll('.drag-over').forEach(el => {
                        el.classList.remove('drag-over');
                    });
                });
            });
        }
        
        function toggleReorderMode(enable) {
            reorderMode = enable;
            
            if (enable) {
                // Save original orders
                saveOriginalOrders();
                
                // Show reorder UI
                $('.category-tree').addClass('reorder-mode');
                $('#toggleReorderBtn').hide();
                $('#saveOrderBtn, #cancelOrderBtn').show();
                $('#reorderHint').show();
                $('[href*="Create"]').hide();
                
                // Make drag handles visible
                $('.drag-handle').show();
            } else {
                $('.category-tree').removeClass('reorder-mode');
                $('#toggleReorderBtn').show();
                $('#saveOrderBtn, #cancelOrderBtn').hide();
                $('#reorderHint').hide();
                $('[href*="Create"]').show();
            }
        }
        
        function saveOriginalOrders() {
            originalOrders = {};
            $('.category-node').each(function() {
                const id = $(this).data('category-id');
                const order = $(this).data('display-order');
                originalOrders[id] = {
                    element: $(this).clone(),
                    order: order,
                    parent: $(this).parent()
                };
            });
        }
        
        function restoreOriginalOrder() {
            // Restore all nodes to original positions
            Object.keys(originalOrders).forEach(id => {
                const original = originalOrders[id];
                const current = $(`.category-node[data-category-id="${id}"]`);
                original.parent.append(current);
            });
            
            originalOrders = {};
        }
        
        function updateDisplayOrders(parent) {
            // Update display order data attributes
            $(parent).children('.category-node').each(function(index) {
                $(this).data('display-order', index);
                $(this).attr('data-display-order', index);
            });
        }
        
        function saveNewOrder() {
            const updates = [];
            
            $('.category-node').each(function(index) {
                const $node = $(this);
                const categoryId = $node.data('category-id');
                const parentId = $node.data('parent-id') || null;
                const newOrder = $node.data('display-order');
                
                updates.push({
                    categoryId: categoryId,
                    parentCategoryId: parentId,
                    displayOrder: newOrder
                });
            });
            
            // Send to backend
            $.ajax({
                url: '@Url.Action("UpdateOrder")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updates),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        // Show success message
                        showToast('success', 'Başarılı', 'Kategori sıralaması güncellendi');
                        
                        // Exit reorder mode
                        toggleReorderMode(false);
                        
                        // Refresh page after 1 second
                        setTimeout(() => window.location.reload(), 1000);
                    } else {
                        showToast('error', 'Hata', response.message || 'Sıralama güncellenirken hata oluştu');
                    }
                },
                error: function(xhr, status, error) {
                    showToast('error', 'Hata', 'Sıralama güncellenirken hata oluştu: ' + error);
                }
            });
        }
        
        function showToast(type, title, message) {
            // Simple toast notification
            const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
            const bgClass = type === 'success' ? 'alert-success' : 'alert-danger';
            
            const toast = $(`
                <div class="alert ${bgClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    <i class="fas ${iconClass} me-2"></i>
                    <strong>${title}:</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            $('body').append(toast);
            
            setTimeout(() => toast.fadeOut(() => toast.remove()), 3000);
        }
    </script>
}

